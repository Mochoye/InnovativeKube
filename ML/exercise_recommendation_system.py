# # -*- coding: utf-8 -*-
# """Exercise Recommendation System

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/exercise-recommendation-system-f87907c1-6ca6-46c5-a068-3c9ebf15027c.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240128/auto/storage/goog4_request%26X-Goog-Date%3D20240128T120131Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D671d8bccc2ca39ae8a7d48e327653f5ae020bde97ba6c40537ea27effcb4e2f8280f08793f62670ec828310931d769f8c157806a3e9db9f8f40cee345876b3f9d153a70a4680816e4cd7e1ef2fe6b4cbde6ecc935d0c22e628cc7aa924a83831734a6b3718b9c91079f113cb02243387044027e0f723fb7633c5b5af70eee48060b561b7e78ff98b6b773cb2cb30471b2df993d3889b1973e82a2859aa13c3e06609eee8ece3e2a94e2e843b326ed78099b295d8995f95336e89ac215eff80257036963c6f7b31eff0660a0e4a7b6cb41487da85ce5501846fe5046a6b223c5bb9abb0666afa6d53b84de8c141bba6527913c85b38d94bd813a1a2e979752d4f
# """

# import pandas as pd
# from rich.console import Console
# from rich.table import Table
# import plotly.graph_objects as go
# import plotly.express as px
# from plotly.subplots import make_subplots

# class ExerciseRecommendationSystem:
#     def __init__(self, csv_path):
#         self.df = pd.read_csv(csv_path)
#         self.console = Console()

#     def recommend_exercises(self, body_part, level):
#         recommendations = self.df[(self.df['BodyPart'] == body_part) & (self.df['Level'] == level)]
#         return recommendations[['Title', 'Type', 'Equipment', 'Desc']]

#     def display_recommendations(self):
#         body_part = input("Enter the body part: ")
#         level = input("Enter the level: ")

#         table = Table(show_header=True, header_style="bold cyan")
#         table.add_column("Title", style="green")
#         table.add_column("Type", style="yellow")
#         table.add_column("Equipment", style="blue")
#         table.add_column("Desc", style="magenta")

#         top_5_recommendations = self.recommend_exercises(body_part, level).head(5)

#         for _, row in top_5_recommendations.iterrows():
#             title = str(row['Title'])
#             exercise_type = str(row['Type'])
#             equipment = str(row['Equipment'])
#             description = str(row['Desc']) if pd.notna(row['Desc']) else "No description available"
#             table.add_row(title, exercise_type, equipment, description)

#         self.console.print(table)

#     def _plot_bar_chart(self, df_subset, title, color_top, color_bottom):
#         df_best = df_subset[df_subset['Type'] == 'Strength'].sort_values(by='Rating', ascending=False).head(5)
#         df_worst = df_subset[df_subset['Type'] == 'Strength'].sort_values(by='Rating', ascending=True).head(5)

#         fig = go.Figure()
#         fig.add_trace(go.Bar(
#             x=df_best['Title'],
#             y=df_best['Rating'],
#             marker_color=color_top,
#             name='Top 5'
#         ))
#         fig.add_trace(go.Bar(
#             x=df_worst['Title'],
#             y=df_worst['Rating'],
#             marker_color=color_bottom,
#             name='Bottom 5'
#         ))

#         fig.update_layout(
#             xaxis_tickangle=45,
#             xaxis_tickmode='array',
#             xaxis_tickvals=list(df_best['Title']),
#             title_text=title,
#             template="plotly_dark"
#         )

#         fig.show()

#     def plot_all_graphs(self):
#         equip_data = self.df.groupby(['Equipment']).count().reset_index()
#         fig = px.bar(
#             equip_data,
#             x='Equipment',
#             y='Title',
#             labels={'Title': 'Count of exercises', 'Equipment': 'Equipment'},
#             title='Exercise names'
#         )
#         fig.update_layout(
#             xaxis=dict(tickangle=45, tickmode='array', tickvals=list(equip_data['Equipment'])),
#             template="plotly_dark",
#         )
#         fig.show()

#         self._plot_bar_chart(self.df[self.df['BodyPart'] == 'Chest'], 'Top 5 and Bottom 5 rated chest exercises', 'blue', 'yellow')

#         options_back = ['Lats', 'Lower Back', 'Middle Back']
#         self._plot_bar_chart(self.df[self.df['BodyPart'].isin(options_back)], 'Top 5 and Bottom 5 rated back exercises', 'green', 'magenta')

#         self._plot_bar_chart(self.df[self.df['BodyPart'] == 'Quadriceps'], 'Top 5 and Bottom 5 rated quad exercises', 'cyan', 'orange')

#         self._plot_bar_chart(self.df[self.df['BodyPart'] == 'Glutes'], 'Top 5 and Bottom 5 rated glute exercises', 'red', 'yellow')

#         self._plot_exercise_count_by_body_part()
#         self._plot_beginner_body_only()
#         self._plot_type_distribution()

#     def _plot_exercise_count_by_body_part(self):
#         count_exercises = self.df.groupby(['BodyPart']).count().sort_values(by='Title', ascending=False)
#         fig = px.bar(count_exercises, x=count_exercises.index, y='Title')
#         fig.update_layout(
#             xaxis_title="Body Part",
#             yaxis_title="Count of Exercises",
#             title_text="Exercise Count by Body Part",
#             template="plotly_dark"
#         )
#         fig.show()

#     def _plot_beginner_body_only(self):
#         beginner = self.df[self.df['Level'] == 'Beginner']
#         body_only = beginner[beginner['Equipment'] == 'Body Only']
#         beginner_body_only = body_only.groupby(['BodyPart']).size().reset_index(name='Count').sort_values(by='Count')
#         fig = px.bar(beginner_body_only, x='BodyPart', y='Count', color='Count')
#         fig.update_layout(
#             xaxis_title="Body Part",
#             yaxis_title="Count of Exercises",
#             title_text="Beginner Body Only Exercises by Body Part",
#             template="plotly_dark"
#         )
#         fig.show()

#     def _plot_type_distribution(self):
#         body_part_dist = self.df.groupby(['Type', 'BodyPart']).size().reset_index(name='Count')
#         all_types = list(self.df["Type"].unique())
#         type_dfs = [body_part_dist[body_part_dist['Type'] == t].set_index('BodyPart') for t in all_types]

#         fig = make_subplots(
#             rows=4, cols=2,
#             specs=[[{"type": "domain"}, {"type": "domain"}],
#                    [{"type": "domain"}, {"type": "domain"}],
#                    [{"type": "domain"}, {"type": "domain"}],
#                    [{"type": "domain"}, {"type": "domain"}],
#                   ])

#         for i in range(7):
#             fig.add_trace(go.Pie(
#                 values=type_dfs[i]['Count'].values,
#                 title=all_types[i],
#                 labels=type_dfs[i].index,
#                 marker=dict(colors=['#100b', '#f00560'], line=dict(color='#FFFFFF', width=2.5)),
#             ), row=(i // 2) + 1, col=(i % 2) + 1)

#         fig.update_layout(height=900, showlegend=False, template="plotly_dark")
#         fig.show()

# exercise_system = ExerciseRecommendationSystem('megaGymDataset.csv')
# exercise_system.display_recommendations()
# exercise_system.plot_all_graphs()




import pandas as pd

class ExerciseRecommendationSystem:
    def __init__(self, csv_path):
        self.df = pd.read_csv(csv_path)

    def recommend_exercises(self, body_part, level):
        recommendations = self.df[(self.df['BodyPart'] == body_part) & (self.df['Level'] == level)]
        non_nan_desc_recommendations = recommendations[recommendations['Desc'].notna()]
        top_10_recommendations = non_nan_desc_recommendations[['Title', 'Type', 'Equipment', 'Desc']].head(10)
        return top_10_recommendations.to_dict(orient='records')
